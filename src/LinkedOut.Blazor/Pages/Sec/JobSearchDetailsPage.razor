@page "/sec/jobsearch/{jobSearchId:int}"

@using LinkedOut.Application.Features.JobSearches.Queries.GetJobSearch

@inject IMediator _mediator;
@inject ICurrentUserService _currentUserService;

<Layout Style="height: 100%">
    <Sider Width="200" Class="site-layout-background" Style="border-right: 1px solid lightgrey;">
        <Menu Mode="MenuMode.Inline"
              DefaultSelectedKeys=@(new[] {"1"})
              DefaultOpenKeys=@(new[] {"sub1"})
              Style="height: 100%; border-right: 0;">
            @{
                RenderFragment sub1Title =
                @<span>
                    <Icon Type="user" Theme="outline" />
                    subnav 1
                </span>;
            }
            <SubMenu Key="sub1" Title=sub1Title>
                <MenuItem Key="1">option1</MenuItem>
                <MenuItem Key="2">option2</MenuItem>
                <MenuItem Key="3">option3</MenuItem>
                <MenuItem Key="4">option4</MenuItem>
            </SubMenu>
            @{
                RenderFragment sub2Title =
                @<span>
                    <Icon Type="laptop" Theme="outline" />
                    subnav 2
                </span>;
            }
            <SubMenu Key="sub2" Title=sub2Title>
                <MenuItem Key="5">option5</MenuItem>
                <MenuItem Key="6">option6</MenuItem>
                <MenuItem Key="7">option7</MenuItem>
                <MenuItem Key="8">option8</MenuItem>
            </SubMenu>
            @{
                RenderFragment sub3Title =
                @<span>
                    <Icon Type="notification" Theme="outline" />
                    subnav 3
                </span>;
            }
            <SubMenu Key="sub3" Title=sub3Title>
                <MenuItem Key="9">option9</MenuItem>
                <MenuItem Key="10">option10</MenuItem>
                <MenuItem Key="11">option11</MenuItem>
                <MenuItem Key="12">option12</MenuItem>
            </SubMenu>
        </Menu>
    </Sider>
    <Layout>

        @if (_isLoading)
        {
            <div style="width: 100%; display: flex; justify-content: center;">
                <Icon Type="loading" Theme="outline" />
            </div>
        }
        else if (jobSearch == null)
        {

        }
        else
        {
            <PageHeader Class="site-page-header" Title="@jobSearch.Title">
                <PageHeaderBreadcrumb>
                    <Breadcrumb Style="margin: 16px 0;">
                        <BreadcrumbItem><a href="/sec/jobsearch">Job searches</a></BreadcrumbItem>
                        <BreadcrumbItem><a href="/sec/jobsearch/@jobSearch.Id">@jobSearch.Title</a></BreadcrumbItem>
                    </Breadcrumb>
                </PageHeaderBreadcrumb>
            </PageHeader>

            <Content Class="site-layout-background" Style=" padding: 24px; margin: 0; min-height: 280px;">

            </Content>

        }
    </Layout>
</Layout>

@code {
    [Parameter]
    public int JobSearchId { get; set; }

    JobSearchDto jobSearch;

    bool _isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        StateHasChanged();

        jobSearch = await _mediator.Send(new GetJobSearchDetailsQuery { JobSearchId = JobSearchId });

        _isLoading = false;

        await base.OnParametersSetAsync();
    }
}
