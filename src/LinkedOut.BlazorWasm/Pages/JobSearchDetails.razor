@page "/jobsearch/{jobSearchId:int}"

@using System.Linq

@inject NavigationManager _navigationManager
@inject ModalService _modalService
@inject JobSearchClient _client

@if (_isLoading)
{
    <div style="width: 100%; display: flex; justify-content: center;">
        <Icon Type="loading" Theme="outline" />
    </div>
}
else if (jobSearch == null)
{
    <Empty>
        It must have only been a nightmare, this search wasn't started! <a href="/sec/jobsearch">Go back</a>.
    </Empty>
}
else
{
    <div class="container">
        <PageHeader Class="site-page-header" Title="@jobSearch.Title">
            <PageHeaderBreadcrumb>
                <Breadcrumb Style="margin: 16px 0;">
                    <BreadcrumbItem><a href="/sec/jobsearch">Job searches</a></BreadcrumbItem>
                    <BreadcrumbItem><a href="/sec/jobsearch/@jobSearch.Id">@jobSearch.Title</a></BreadcrumbItem>
                </Breadcrumb>
            </PageHeaderBreadcrumb>
            <PageHeaderExtra>
                <Button Type="@ButtonType.Primary" Icon="plus" OnClick="handleAddJobPostingClick">Add job posting</Button>
                <Dropdown Placement="@PlacementType.BottomRight">
                    <ChildContent>
                        <Button Icon="ellipsis" Loading="@_loading" />
                    </ChildContent>
                    <Overlay>
                        <Menu>
                            @*<MenuItem Key="1">Close</MenuItem>*@
                            <MenuItem Key="2" OnClick="handleDeleteClick"><Icon Type="delete" /> Delete</MenuItem>
                        </Menu>
                    </Overlay>
                </Dropdown>
            </PageHeaderExtra>
        </PageHeader>

        <Content Class="site-layout-background" Style=" padding: 24px; margin: 0; min-height: 280px; background-color: white;">
            <Space Direction="vertical" Size="large" Style="width: 100%">
                <div class="statistics">
                    <SpaceItem>
                        <Space>
                            @foreach (var statistic in _statistics)
                            {
                                <SpaceItem>
                                    <Card>
                                        <Statistic Title="@statistic.Title" Value="@statistic.Value" />
                                    </Card>
                                </SpaceItem>
                            }
                        </Space>
                        <Divider Class="statistics" />
                    </SpaceItem>
                </div>
                <SpaceItem>
                    <Title Level="3">Opportunities</Title>
                    @if (jobSearch.Applications.Count == 0)
                    {
                        <Empty Style="width: 100%;">
                            <DescriptionTemplate>
                                <span>No job postings have been attached to this search.</span>
                            </DescriptionTemplate>
                            <ChildContent>
                                <Button type="@ButtonType.Primary" OnClick="handleAddJobPostingClick">Add one now</Button>
                            </ChildContent>
                        </Empty>
                    }
                    else
                    {
                        <Table TItem="JobSearchOpportunityDto" DataSource="@jobSearch.Applications">
                            <Column @bind-Field="@context.JobTitle" Title="Title" Sortable>
                                <a href="/sec/jobsearch/@JobSearchId/opportunity/@context.Id">@context.JobTitle</a>
                            </Column>
                            <Column @bind-Field="@context.OrganizationName" Title="Organization" Sortable></Column>
                            <Column @bind-Field="@context.Location" Sortable>
                                <TitleTemplate>
                                    <span> <Icon Type="environment" /> Location </span>
                                </TitleTemplate>
                            </Column>
                            <Column @bind-Field="@context.Created" Sortable>@context.Created.ToString()</Column>
                            <Column @bind-Field="@context.CurrentStatus" Title="Status" Sortable>
                                <StatusTag Status="@context.CurrentStatus" />
                            </Column>
                            <Column @bind-Field="@context.AppliedOn" Sortable>
                                @if (context.DidApply)
                                        {
                                    @context.AppliedOn.Value.ToString()
                                        }
                            </Column>
                        </Table>
                    }
                </SpaceItem>
            </Space>
        </Content>
    </div>
}

<Drawer Visible="_jobOpportunityDrawer"
        Placement="right"
        Width="640"
        Title="@("Track an opportunity")"
        OnClose="closeJobOpportunityDrawer">
    <Form Model="@_jobOpportunityModel"
          OnFinish="handleAddJobSearchSubmit"
          LabelColSpan="4"
          WrapperColSpan="20">
        <FormItem Label="Organization">
            <Input @bind-Value="@context.OrganizationName" Placeholder="Planet Express" />
        </FormItem>

        <FormItem Label="Title">
            <Input @bind-Value="@context.JobTitle" Placeholder="Delivery Boy" />
        </FormItem>

        <FormItem Label="Description">
            <RichTextInput @bind-Value="@context.Description" />
        </FormItem>

        <FormItem Label="Remote?">
            <Switch Checked="@context.IsRemote" @bind-Value="@context.IsRemote" />
        </FormItem>

        <FormItem Label="City">
            <Input @bind-Value="@context.IsRemote" />
        </FormItem>

        <FormItem Label="Province">
            <Input @bind-Value="@context.Province" />
        </FormItem>

        <FormItem WrapperColOffset="4" WrapperColSpan="20">
            <Button Type="@ButtonType.Primary" HtmlType="submit">Save</Button>
        </FormItem>
    </Form>
</Drawer>

@code {
    [Parameter]
    public int JobSearchId { get; set; }

    JobSearchDto jobSearch;
    bool _loading = false;
    List<StatisticEntry> _statistics = new();

    bool _isLoading = false;

    #region Add job opportunity
    bool _jobOpportunityDrawer = false;
    AddJobOpportunityModel _jobOpportunityModel = new();

    private async Task handleAddJobSearchSubmit()
    {
        var result = await _client.AddJobOpportunityAsync(JobSearchId, _jobOpportunityModel);
        _jobOpportunityDrawer = false;
        _jobOpportunityModel = new();
        UpdateJobSearch();
    }

    private void closeJobOpportunityDrawer()
    {
        _jobOpportunityDrawer = false;
        StateHasChanged();
    }
    //private EditJobDescriptionModal editJobDescriptionModal;
    private void handleAddJobPostingClick()
    {
        _jobOpportunityDrawer = true;
    }

    private async Task handleJobApplicationCreate(int createdId)
    {
        await UpdateJobSearch();
    }
    #endregion

    private async Task handleDeleteClick()
    {
        Console.WriteLine("Delete click");

        RenderFragment content =@<div>Are you sure you want to delete this search? This cannot be undone.</div>;

        var options = new ConfirmOptions()
        {
            Title = "Confirmation required",
            Icon =@<Icon Type="exclamation-circle" Theme="outline"></Icon>,
            Content = content,
            OnOk = (e) => { return deleteJobSearch(); },
            OkType = "danger",
        };

        _modalService.Confirm(options);

        //var confirmRef = await _modalService.CreateConfirmAsync(options);

        //confirmRef.OnOpen = () =>
        //{
        //    Console.WriteLine("Open Modal");
        //    return Task.CompletedTask;
        //};

        //confirmRef.OnClose = () =>
        //{
        //    Console.WriteLine("Close Modal");
        //    return Task.CompletedTask;
        //};

        //await confirmRef.OpenAsync();
    }

    private async Task deleteJobSearch()
    {
        _loading = true;

        await _client.DeleteJobSearchAsync(JobSearchId);

        _loading = false;
        _navigationManager.NavigateTo("/jobsearch", true);
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateJobSearch();

        await base.OnParametersSetAsync();
    }

    private async Task UpdateJobSearch()
    {
        _isLoading = true;
        StateHasChanged();

        jobSearch = await _client.GetJobSearchAsync(JobSearchId);

        _statistics.Clear();

        if (jobSearch != null)
        {
            var daysInProgress = (int)(DateTime.Now - jobSearch.Created).TotalDays;
            _statistics.Add(new StatisticEntry { Title = "Days In Progress", Value = daysInProgress });

            var jobsTracked = jobSearch.Applications.Count;
            _statistics.Add(new StatisticEntry { Title = "Opportunities", Value = jobsTracked });

            var jobsAppliedTo = jobSearch.Applications
            .Where(a => a.CurrentStatus >= ApplicationStatuses.SUBMITTED)
            .Count();
            _statistics.Add(new StatisticEntry { Title = "Total Applications", Value = jobsAppliedTo });

            var openApplications = jobSearch.Applications
            .Where(a => a.CurrentStatus >= ApplicationStatuses.SUBMITTED)
            .Where(a => a.CurrentStatus != ApplicationStatuses.CLOSED)
            .Count();
            _statistics.Add(new StatisticEntry { Title = "Open Applications", Value = openApplications });

            var employerContacts = jobSearch.Applications
            .Where(n => n.HasContact)
            .Count();
            _statistics.Add(new StatisticEntry { Title = "Employer Contacts", Value = employerContacts });

            var rejections = jobSearch.Applications
            .Where(a => a.Resolution == ApplicationResolutions.REJECTED)
            .Count();
            _statistics.Add(new StatisticEntry { Title = "Rejections", Value = rejections });
        }

        _isLoading = false;
        StateHasChanged();
    }

    public class StatisticEntry
    {
        public string Title { get; set; }

        public int Value { get; set; }
    }
}
